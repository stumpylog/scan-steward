[project]
name = "scansteward"
description = "Add your description here"
version = "0.0.1"
requires-python = ">= 3.11"

dependencies = [
    "django-ninja>=1.3.0",
    "django-typer[rich]>=2.2.1",
    "huey>=2.5.1",
    "redis[hiredis]>=5.0.8",
    "pydantic[email]>=2.8.2",
    "pydantic-settings>=2.4.0",
    "pydantic-extra-types>=2.9.0",
    "blake3>=0.4.1",
    "orjson>=3.10.7",
    "imagehash>=4.3.1",
    "simpleiso3166[search]>=0.1.0",
    "granian>=1.5.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["scansteward"]

[tool.uv]
environments = [
    "sys_platform == 'win32'",
    "sys_platform == 'linux'",
]
dev-dependencies = [
    "ruff>=0.6.0",
    "pytest>=8.3.2",
    "pytest-asyncio>=0.23.8",
    "pytest-sugar>=1.0.0",
    "pytest-cov>=5.0.0",
    "pytest-django>=4.8.0",
    "pytest-env>=1.1.3",
    "pytest-xdist>=3.6.1",
    "pytest-randomly>=3.15.0",
    "coverage>=7.6.1",
    "faker>=27.4.0",
    "codespell>=2.3.0",
    "mypy>=1.11.1",
    "django-stubs[compatible-mypy]>=5.0.4",
]


[tool.ruff]
fix = true
output-format = "grouped"
target-version = "py311"
line-length = 120
show-fixes = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
extend-select = [
  "A",      # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "ARG",    # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
  "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
  "B",      # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "BLE",    # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
  "C",      # https://docs.astral.sh/ruff/rules/#convention-c
  "C4",     # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  # "CPY",   # https://docs.astral.sh/ruff/rules/#flake8-copyright-cpy
  "COM",    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "DTZ",    # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "DJ",     # https://docs.astral.sh/ruff/rules/#flake8-django-dj
  "E",      # https://docs.astral.sh/ruff/rules/#error-e
  "EM",     # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "ERA",    # https://docs.astral.sh/ruff/rules/#eradicate-era
  "EXE",    # https://docs.astral.sh/ruff/rules/#flake8-executable-exe
  "F",      # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "FA",     # https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
  "FBT",    # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FIX",    # https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
  "FLY",    # https://docs.astral.sh/ruff/rules/#flynt-fly
  "I",      # https://docs.astral.sh/ruff/rules/#isort-i
  "ICN",    # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
  "INP",    # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
  "INT",    # https://docs.astral.sh/ruff/rules/#flake8-gettext-int
  "ISC",    # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
  "LOG",    # https://docs.astral.sh/ruff/rules/#flake8-logging-log
  "G",      # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  "N",      # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "PERF",   # https://docs.astral.sh/ruff/rules/#perflint-perf
  "PIE",    # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "PGH",    # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
  "PTH",    # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "PL",     # https://docs.astral.sh/ruff/rules/#pylint-pl
  "PLC",    # https://docs.astral.sh/ruff/rules/#convention-c
  "PLE",    # https://docs.astral.sh/ruff/rules/#error-e_1
  "PLR",    # https://docs.astral.sh/ruff/rules/#refactor-r
  "PLW",    # https://docs.astral.sh/ruff/rules/#warning-w_1
  "PT",     # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "Q",      # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
  "RSE",    # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
  "RET",    # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "RUF",    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "S",      # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "SIM",    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "SLF",    # https://docs.astral.sh/ruff/rules/#flake8-self-slf
  "SLOT",   # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
  "TD",     # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "T10",    # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "T20",    # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "TCH",    # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
  "TD",     # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "TID",    # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
  "TRY",    # https://docs.astral.sh/ruff/rules/#tryceratops-try
  "UP",     # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "W",      # https://docs.astral.sh/ruff/rules/#warning-w
  "YTT",    # https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Ignore no author and missing issue link in TODO tags
  "TD002",
  "TD003",
  # Ignore subprocess.run calls
  "S603",
  "G004",
  "FIX002",
]

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["scansteward"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"**/tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]
# Migrations can use mutable class attributes
"**/migrations/*" = ["RUF012"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["scansteward/tests"]
addopts = "--pythonwarnings=all --cov --cov-report=html --cov-report=json --cov-report=term -n auto --maxprocesses=8 -p no:legacypath"
asyncio_mode = "auto"
DJANGO_SETTINGS_MODULE = "scansteward.settings"


[tool.mypy]
plugins = ["pydantic.mypy", "mypy_django_plugin.main"]
exclude = ["scansteward/tests/"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
# disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
branch = true
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "def __str__",
  "if TYPE_CHECKING",
  "if proc.returncode != 0",
  "if sys.version_info >",
  "def __get_pydantic_json_schema__",
]

[tool.coverage.html]
directory = "coverage_html_report"

[tool.django-stubs]
django_settings_module = "scansteward.settings"

[tool.pytest_env]
SCAN_STEWARD_UNDER_TEST = 1
